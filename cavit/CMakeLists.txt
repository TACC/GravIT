CMAKE_MINIMUM_REQUIRED(VERSION 2.6.4)

# PROJECT(gvt)

# SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/CMake)
# #FIND_PACKAGE(OpenGL)

# #
# #embree
# #

# # SET(EMBREE_DIR "" CACHE PATH "base RIVL directory")
# # SET(EMBREE_BUILD_DIR "" CACHE PATH "base RIVL directory")
# # INCLUDE_DIRECTORIES(${EMBREE_DIR} ${EMBREE_DIR}/embree
# #   ${EMBREE_DIR}/examples/common 
# #   ${EMBREE_DIR}/examples/renderer
# #   ${EMBREE_DIR}/examples/renderer/renderer
# #   ${EMBREE_DIR}/examples/tutorials
# #   )
# #INCLUDE_DIRECTORIES(${RIVL_DIR}/../host)


# # SET(EMBREE_LIBS "")
# # SET(LIB_EMBREE_EMBREE LIB_EMBREE_EMBREE-NOTFOUND)
# # SET(LIB_EMBREE_SYS LIB_EMBREE_SYS-NOTFOUND)
# # SET(LIB_EMBREE_LEXERS LIB_EMBREE_LEXERS-NOTFOUND)
# # FIND_LIBRARY(LIB_EMBREE_EMBREE embree ${EMBREE_BUILD_DIR})
# # FIND_LIBRARY(LIB_EMBREE_SYS sys ${EMBREE_BUILD_DIR})
# # FIND_LIBRARY(LIB_EMBREE_LEXERS lexers ${EMBREE_BUILD_DIR})
# # FIND_LIBRARY(LIB_EMBREE_TUTORIAL tutorial ${EMBREE_BUILD_DIR}) 
# # SET(EMBREE_LIBS ${EMBREE_LIBS} ${LIB_EMBREE_TUTORIAL})
# # FIND_LIBRARY(LIB_EMBREE_TUTORIAL_DEVICE tutorial_device ${EMBREE_BUILD_DIR}) 
# # SET(EMBREE_LIBS ${EMBREE_LIBS} ${LIB_EMBREE_TUTORIAL_DEVICE})
# # FIND_LIBRARY(LIB_EMBREE_TRANSPORT transport ${EMBREE_BUILD_DIR})
# # SET(EMBREE_LIBS ${EMBREE_LIBS} ${LIB_EMBREE_TRANSPORT})

# # SET(EMBREE_LIBS 
# #   ${EMBREE_LIBS}
# #   ${LIB_EMBREE_EMBREE}
# #   ${LIB_EMBREE_SYS}
# #   ${LIB_EMBREE_LEXERS}
# #   )

# SET(GVT_SRC
#   src/gvtInterface.cc
#   src/gvtState.cc
#   )


# SET(GVT_HDR
#   src/gvtInterface.h
#   src/gvtState.h
#   )

# ADD_LIBRARY(gvt SHARED ${GVT_SRC} ${GVT_HDR})

# #SET(USE_RIVL NO CACHE BOOL "using intels rivl")
# SET(USE_EMBREE NO CACHE BOOL "using intels embree")
# FIND_PACKAGE(MPI REQUIRED)
# FIND_PACKAGE(Boost COMPONENTS timer system serialization filesystem REQUIRED)
# set(GLM_ROOT_DIR "${PROJECT_SOURCE_DIR}/glm")
# MESSAGE(${GLM_ROOT_DIR})
# SET(CMAKE_PREFIX_PATH ${PROJECT_SOURCE_DIR}/glm)
# find_package(GLM REQUIRED)
# INCLUDE_DIRECTORIES(${GLM_INCLUDE_DIR})
# INCLUDE_DIRECTORIES(${MPI_INCLUDE_PATH})
# INCLUDE_DIRECTORIES( ${Boost_INCLUDE_DIR} )
#  #TARGET_LINK_LIBRARIES(gvt ${MPI_LIBRARIES})
# #TARGET_LINK_LIBRARIES(gvt ${Boost_LIBRARIES} ${MPI_LIBRARIES})
# # if(MPI_COMPILE_FLAGS)
# #   set_target_properties(gvt PROPERTIES
# #     COMPILE_FLAGS "${MPI_COMPILE_FLAGS}")
# # endif()

# # if(MPI_LINK_FLAGS)
# #   set_target_properties(gvt PROPERTIES
# #     LINK_FLAGS "${MPI_LINK_FLAGS}")
# # endif()


# SET(GVT_LIBS ${Boost_LIBRARIES} ${MPI_LIBRARIES})
# SET(GVT_LIBS ${GVT_LIBS} ${EMBREE_LIBS})
# TARGET_LINK_LIBRARIES(gvt ${GVT_LIBS})
# #SET(GVT_LIBS ${MPI_LIBRARIES})
# MESSAGE("boost libs:" ${Boost_LIBRARIES})
# MESSAGE("gvt libs:" ${GVT_LIBS})
# # add_definitions(-DBOOST_ALL_NO_LIB)  # tell the compiler to undefine this boost macro

#
#set cmake defines accessable by source files
#
PROJECT(gvtRenderer)

SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/CMake)

SET(GVT_CLIENT_SRC
  src/gvtWorker.cc
  # ${EMBREE_DIR}/tutorials/tutorial00/tutorial00_device.cpp
  # ${EMBREE_DIR}/tutorials/tutorial00/tutorial00.cpp
  # src/embreeRenderer_device.cc
  src/gvtServer.cc
  src/gvtDisplay.cc
  src/gvtState.cc
  src/test.cc
  src/gvtMCube.cc
  # src/tutorial03_device.cpp
  )
SET(GVT_CLIENT_HDR
  )

FIND_PACKAGE(MPI REQUIRED)
FIND_PACKAGE(OpenGL)
FIND_PACKAGE(GLUT)
FIND_PACKAGE(Manta REQUIRED)
Message("manta link dirs:" ${MANTA_LINK_DIRECTORIES})
LINK_DIRECTORIES(${MANTA_LINK_DIRECTORIES})
set(GLM_ROOT_DIR "${PROJECT_SOURCE_DIR}/glm")
MESSAGE(${GLM_ROOT_DIR})
find_package(GLM REQUIRED)
INCLUDE_DIRECTORIES(${GLM_INCLUDE_DIR})
FIND_PACKAGE(Boost COMPONENTS timer system serialization filesystem REQUIRED)
INCLUDE_DIRECTORIES(${MPI_INCLUDE_PATH})
INCLUDE_DIRECTORIES(/usr/local/include)
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${EMBREE_DIR})
INCLUDE_DIRECTORIES(${EMBREE_DIR}/include)
INCLUDE_DIRECTORIES(${EMBREE_DIR}/tutorials/common)
INCLUDE_DIRECTORIES(${EMBREE_DIR}/common)
LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})

ADD_EXECUTABLE(gvtRenderer ${GVT_CLIENT_SRC} ${GVT_CLIENT_HDR})

# TARGET_LINK_LIBRARIES(gvtClient ${MPI_LIBRARIES})
# TARGET_LINK_LIBRARIES(gvtClient ${Boost_LIBRARIES} )
# MESSAGE("boost libs:" ${Boost_LIBRARIES})
TARGET_LINK_LIBRARIES(gvtRenderer 
  ${GVT_LIBS} ${OPENGL_LIBRARIES} ${GLUT_LIBRARIES} ${Boost_LIBRARIES} ${MPI_LIBRARIES}
  ${Boost_SERIALIZATION_LIBRARY_RELEASE} ${MANTA_TARGET_LINK_LIBRARIES}
  )

# add_definitions(-DBOOST_ALL_NO_LIB)  # tell the compiler to undefine this boost macro



# PROJECT(gvtServer)

# SET(GVT_SERVER_SRC
#   src/gvtServer.cc
#   )
# SET(GVT_SERVER_HDR
#   )
# ADD_EXECUTABLE(gvtServer ${GVT_SERVER_SRC} ${GVT_SERVER_HDR})
# #TARGET_LINK_LIBRARIES(gvtServer)

# #IF (ENABLE_MPI)
# # FIND_PACKAGE(MPI REQUIRED)
# # FIND_PACKAGE(BOOST COMPONENTS serialization REQUIRED)
#  #INCLUDE_DIRECTORIES(${MPI_INCLUDE_PATH})
#  INCLUDE_DIRECTORIES( ${Boost_INCLUDE_DIR} )
# TARGET_LINK_LIBRARIES(gvtServer gvt ${GVT_LIBS})
# # TARGET_LINK_LIBRARIES( gvtServer ${Boost_LIBRARIES} )
# # TARGET_LINK_LIBRARIES(gvtServer ${MPI_LIBRARIES})

# PROJECT(gvtDisplay)

# SET(GVT_DISPLAY_SRC
#   src/gvtDisplay.cc
#   )
# SET(GVT_DISPLAY_HDR
#   )
# ADD_EXECUTABLE(gvtDisplay ${GVT_DISPLAY_SRC} ${GVT_DISPLAY_HDR})
# #TARGET_LINK_LIBRARIES(gvtServer)

# #IF (ENABLE_MPI)
# # FIND_PACKAGE(MPI REQUIRED)
# # FIND_PACKAGE(BOOST COMPONENTS serialization REQUIRED)
#  #INCLUDE_DIRECTORIES(${MPI_INCLUDE_PATH})
#  INCLUDE_DIRECTORIES( ${Boost_INCLUDE_DIR} )
# TARGET_LINK_LIBRARIES(gvtDisplay gvt ${GVT_LIBS})
# # TARGET_LINK_LIBRARIES( gvtServer ${Boost_LIBRARIES} )
# # TARGET_LINK_LIBRARIES(gvtServer ${MPI_LIBRARIES})



# PROJECT(gvtProgram)


# SET(GVTPROGRAM_SRC
#   # src/gvtInterface.cc
#   src/gvtProgram.cc
#   )
# SET(GVTPROGRAM_HDR
#   # src/gvtInterface.h
#   )
# ADD_EXECUTABLE(gvtProgram ${GVTPROGRAM_SRC} ${GVTPROGRAM_HDR})
# #TARGET_LINK_LIBRARIES(gvtServer)

# #IF (ENABLE_MPI)
# # FIND_PACKAGE(MPI REQUIRED)
# # FIND_PACKAGE(BOOST REQUIRED)
# #INCLUDE_DIRECTORIES(${MPI_INCLUDE_PATH})
# INCLUDE_DIRECTORIES( ${Boost_INCLUDE_DIR} )
# TARGET_LINK_LIBRARIES(gvtProgram gvt ${GVT_LIBS})
# # TARGET_LINK_LIBRARIES( myProgram ${Boost_LIBRARIES} )
# # TARGET_LINK_LIBRARIES(myProgram ${MPI_LIBRARIES})

